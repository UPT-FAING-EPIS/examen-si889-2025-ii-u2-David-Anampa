name: Generate Documentation and Class Diagrams

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force complete rebuild of documentation'
        required: false
        default: 'false'
        type: boolean

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '11'

jobs:
  analyze-code:
    name: Analyze Code Structure
    runs-on: ubuntu-latest
    
    outputs:
      has-js-files: ${{ steps.check-files.outputs.has-js }}
      classes-found: ${{ steps.analyze.outputs.classes }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check for JavaScript files
        id: check-files
        run: |
          if find src -name "*.js" -type f | grep -q .; then
            echo "has-js=true" >> $GITHUB_OUTPUT
          else
            echo "has-js=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Analyze code structure
        id: analyze
        run: |
          classes=$(find src -name "*.js" -exec grep -l "class " {} \; | wc -l)
          echo "classes=$classes" >> $GITHUB_OUTPUT
          echo "Found $classes classes in the codebase"

  generate-docs:
    name: Generate JSDoc Documentation
    runs-on: ubuntu-latest
    needs: analyze-code
    if: needs.analyze-code.outputs.has-js-files == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci
          npm install -g jsdoc
          
      - name: Generate JSDoc documentation
        run: |
          echo "üìö Generating JSDoc documentation..."
          jsdoc -c jsdoc.conf.json
          
      - name: Create documentation index
        run: |
          mkdir -p docs-site
          cat > docs-site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="es">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Biblioteca Digital - Documentaci√≥n</title>
              <style>
                  * { margin: 0; padding: 0; box-sizing: border-box; }
                  body {
                      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      min-height: 100vh;
                      padding: 20px;
                  }
                  .container {
                      max-width: 1200px;
                      margin: 0 auto;
                      background: rgba(255, 255, 255, 0.1);
                      backdrop-filter: blur(10px);
                      border-radius: 20px;
                      padding: 40px;
                      box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
                      border: 1px solid rgba(255, 255, 255, 0.18);
                  }
                  h1 {
                      color: white;
                      font-size: 3rem;
                      margin-bottom: 10px;
                      font-weight: 700;
                      text-align: center;
                  }
                  .subtitle {
                      color: rgba(255, 255, 255, 0.8);
                      font-size: 1.3rem;
                      margin-bottom: 40px;
                      text-align: center;
                  }
                  .grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                      gap: 25px;
                      margin-bottom: 40px;
                  }
                  .card {
                      background: rgba(255, 255, 255, 0.1);
                      border-radius: 15px;
                      padding: 30px;
                      text-decoration: none;
                      color: white;
                      transition: all 0.3s ease;
                      border: 1px solid rgba(255, 255, 255, 0.1);
                      text-align: center;
                  }
                  .card:hover {
                      background: rgba(255, 255, 255, 0.2);
                      transform: translateY(-5px);
                      box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
                  }
                  .card-icon {
                      font-size: 3rem;
                      margin-bottom: 15px;
                      display: block;
                  }
                  .card-title {
                      font-size: 1.4rem;
                      font-weight: 600;
                      margin-bottom: 10px;
                  }
                  .card-desc {
                      color: rgba(255, 255, 255, 0.7);
                      font-size: 1rem;
                      line-height: 1.5;
                  }
                  .stats {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                      gap: 20px;
                      margin-top: 30px;
                  }
                  .stat {
                      background: rgba(255, 255, 255, 0.1);
                      border-radius: 10px;
                      padding: 20px;
                      text-align: center;
                      border: 1px solid rgba(255, 255, 255, 0.1);
                  }
                  .stat-number {
                      font-size: 2rem;
                      font-weight: bold;
                      color: white;
                      display: block;
                  }
                  .stat-label {
                      color: rgba(255, 255, 255, 0.7);
                      font-size: 0.9rem;
                      margin-top: 5px;
                  }
                  .footer {
                      text-align: center;
                      color: rgba(255, 255, 255, 0.6);
                      font-size: 0.9rem;
                      margin-top: 40px;
                      padding-top: 20px;
                      border-top: 1px solid rgba(255, 255, 255, 0.1);
                  }
                  .badge {
                      display: inline-block;
                      background: rgba(255, 255, 255, 0.2);
                      padding: 5px 12px;
                      border-radius: 20px;
                      font-size: 0.8rem;
                      margin-left: 10px;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>üèõÔ∏è Biblioteca Digital</h1>
                  <p class="subtitle">Documentaci√≥n T√©cnica y Diagramas de Arquitectura</p>
                  
                  <div class="grid">
                      <a href="./api-docs/index.html" class="card">
                          <span class="card-icon"></span>
                          <div class="card-title">Documentaci√≥n API <span class="badge">JSDoc</span></div>
                          <div class="card-desc">Documentaci√≥n completa de clases, m√©todos y funciones generada autom√°ticamente</div>
                      </a>
                      
                      <a href="./diagrams/class-diagram.html" class="card">
                          <span class="card-icon"></span>
                          <div class="card-title">Diagrama de Clases <span class="badge">PlantUML</span></div>
                          <div class="card-desc">Visualizaci√≥n de la arquitectura y relaciones entre clases del sistema</div>
                      </a>
                      
                      <a href="https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}" class="card">
                          <span class="card-icon"></span>
                          <div class="card-title">C√≥digo Fuente</div>
                          <div class="card-desc">Repositorio principal con el c√≥digo fuente del proyecto</div>
                      </a>
                      
                      <a href="https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions" class="card">
                          <span class="card-icon"></span>
                          <div class="card-title">GitHub Actions</div>
                          <div class="card-desc">Estado de las automatizaciones y procesos CI/CD</div>
                      </a>
                  </div>
                  
                  <div class="stats">
                      <div class="stat">
                          <span class="stat-number">${{ needs.analyze-code.outputs.classes-found }}</span>
                          <div class="stat-label">Clases Documentadas</div>
                      </div>
                      <div class="stat">
                          <span class="stat-number">$(find src -name "*.js" | wc -l)</span>
                          <div class="stat-label">Archivos JavaScript</div>
                      </div>
                      <div class="stat">
                          <span class="stat-number">$(date +%Y)</span>
                          <div class="stat-label">A√±o de Desarrollo</div>
                      </div>
                      <div class="stat">
                          <span class="stat-number">v1.0.0</span>
                          <div class="stat-label">Versi√≥n Actual</div>
                      </div>
                  </div>
                  
                  <div class="footer">
                      <p> √öltima actualizaci√≥n: $(date)</p>
                      <p> Generado autom√°ticamente por GitHub Actions</p>
                      <p> Workflow: publish_doc.yml</p>
                  </div>
              </div>
          </body>
          </html>
          EOF
          
      - name: Copy JSDoc documentation
        run: |
          cp -r docs/* docs-site/api-docs/ 2>/dev/null || mkdir -p docs-site/api-docs
          
      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jsdoc-documentation
          path: docs-site/
          retention-days: 30

  generate-diagrams:
    name: Generate Class Diagrams
    runs-on: ubuntu-latest
    needs: analyze-code
    if: needs.analyze-code.outputs.classes-found > 0
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          
      - name: Install PlantUML
        run: |
          wget -O plantuml.jar https://github.com/plantuml/plantuml/releases/download/v1.2023.12/plantuml-1.2023.12.jar
          
      - name: Analyze code and generate PlantUML
        run: |
          mkdir -p diagrams
          
          # Generate PlantUML class diagram
          cat > diagrams/classes.puml << 'EOF'
          @startuml
          !theme aws-orange
          title Biblioteca Digital - Diagrama de Clases
          
          package "Models" {
              class Usuario {
                  -id: string
                  -nombre: string
                  -email: string
                  -tipo: string
                  -librosPrestados: Array<string>
                  -fechaRegistro: Date
                  -activo: boolean
                  
                  +constructor(nombre, email, tipo)
                  +obtenerInfo(): Object
                  +prestarLibro(libroId: string): void
                  +devolverLibro(libroId: string): void
                  +puedePrestar(): boolean
                  +desactivar(): void
                  +activar(): void
              }
              
              class Libro {
                  -id: string
                  -titulo: string
                  -autor: string
                  -isbn: string
                  -anioPublicacion: number
                  -categoria: string
                  -disponible: boolean
                  -prestadoA: string
                  -fechaPrestamo: Date
                  -fechaRegistro: Date
                  
                  +constructor(titulo, autor, isbn, anio, categoria)
                  +obtenerInfo(): Object
                  +prestar(usuarioId: string): void
                  +devolver(): void
                  +estaVencido(): boolean
                  +actualizar(nuevaInfo: Object): void
              }
          }
          
          package "Services" {
              class BibliotecaService {
                  -usuarios: Map<string, Usuario>
                  -libros: Map<string, Libro>
                  -operaciones: number
                  
                  +constructor()
                  +registrarUsuario(nombre, email, tipo): Usuario
                  +registrarLibro(titulo, autor, isbn, anio, categoria): Libro
                  +prestarLibro(usuarioId, libroId): void
                  +devolverLibro(usuarioId, libroId): void
                  +buscarLibros(termino): Array<Libro>
                  +obtenerEstadisticas(): Object
                  +obtenerLibrosVencidos(): Array<Object>
              }
          }
          
          ' Relaciones
          BibliotecaService "1" *-- "many" Usuario : gestiona
          BibliotecaService "1" *-- "many" Libro : gestiona
          Usuario "1" -- "many" Libro : presta
          
          ' Notas
          note right of Usuario : Tipos: estudiante,\nprofesor, administrador
          note right of Libro : Control autom√°tico\nde vencimientos
          note bottom of BibliotecaService : Coordina todas las\noperaciones del sistema
          
          @enduml
          EOF
          
      - name: Generate class diagram
        run: |
          java -jar plantuml.jar -tsvg diagrams/classes.puml
          java -jar plantuml.jar -tpng diagrams/classes.puml
          
      - name: Create diagram viewer
        run: |
          mkdir -p diagrams-site/diagrams
          
          # Copy generated diagrams
          cp diagrams/classes.svg diagrams-site/diagrams/
          cp diagrams/classes.png diagrams-site/diagrams/
          
          # Create HTML viewer
          cat > diagrams-site/diagrams/class-diagram.html << 'EOF'
          <!DOCTYPE html>
          <html lang="es">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Diagrama de Clases - Biblioteca Digital</title>
              <style>
                  * { margin: 0; padding: 0; box-sizing: border-box; }
                  body {
                      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      min-height: 100vh;
                      padding: 20px;
                  }
                  .container {
                      max-width: 1400px;
                      margin: 0 auto;
                      background: rgba(255, 255, 255, 0.1);
                      backdrop-filter: blur(10px);
                      border-radius: 20px;
                      padding: 30px;
                      box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
                      border: 1px solid rgba(255, 255, 255, 0.18);
                  }
                  h1 {
                      color: white;
                      font-size: 2.5rem;
                      margin-bottom: 20px;
                      text-align: center;
                      font-weight: 700;
                  }
                  .diagram-container {
                      background: white;
                      border-radius: 15px;
                      padding: 20px;
                      margin: 20px 0;
                      text-align: center;
                      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
                  }
                  .diagram-container img {
                      max-width: 100%;
                      height: auto;
                      border-radius: 10px;
                  }
                  .controls {
                      text-align: center;
                      margin-bottom: 20px;
                  }
                  .btn {
                      background: rgba(255, 255, 255, 0.2);
                      color: white;
                      border: 1px solid rgba(255, 255, 255, 0.3);
                      padding: 10px 20px;
                      border-radius: 25px;
                      margin: 0 10px;
                      cursor: pointer;
                      transition: all 0.3s ease;
                      text-decoration: none;
                      display: inline-block;
                  }
                  .btn:hover {
                      background: rgba(255, 255, 255, 0.3);
                      transform: translateY(-2px);
                  }
                  .info {
                      color: rgba(255, 255, 255, 0.8);
                      text-align: center;
                      margin-top: 20px;
                      font-size: 0.9rem;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>üèóÔ∏è Diagrama de Clases</h1>
                  
                  <div class="controls">
                      <a href="../index.html" class="btn"> Inicio</a>
                      <a href="./classes.svg" class="btn" download> Descargar SVG</a>
                      <a href="./classes.png" class="btn" download> Descargar PNG</a>
                  </div>
                  
                  <div class="diagram-container">
                      <img src="./classes.svg" alt="Diagrama de Clases - Biblioteca Digital" />
                  </div>
                  
                  <div class="info">
                      <p> Diagrama generado autom√°ticamente con PlantUML</p>
                      <p> Actualizado: $(date)</p>
                      <p> Muestra las relaciones entre las clases del sistema</p>
                  </div>
              </div>
          </body>
          </html>
          EOF
          
      - name: Upload diagram artifacts
        uses: actions/upload-artifact@v4
        with:
          name: class-diagrams
          path: diagrams-site/
          retention-days: 30

  publish-pages:
    name: Publish to GitHub Pages
    runs-on: ubuntu-latest
    needs: [generate-docs, generate-diagrams]
    if: always() && (needs.generate-docs.result == 'success' || needs.generate-diagrams.result == 'success')
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download documentation artifacts
        uses: actions/download-artifact@v4
        with:
          name: jsdoc-documentation
          path: site/
        continue-on-error: true
        
      - name: Download diagram artifacts
        uses: actions/download-artifact@v4
        with:
          name: class-diagrams
          path: site/
        continue-on-error: true
        
      - name: Create fallback site if no artifacts
        run: |
          if [ ! -d "site" ] || [ -z "$(ls -A site)" ]; then
            mkdir -p site
            cat > site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="es">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Biblioteca Digital - En Construcci√≥n</title>
              <style>
                  body {
                      font-family: Arial, sans-serif;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      min-height: 100vh;
                      display: flex;
                      align-items: center;
                      justify-content: center;
                      margin: 0;
                      color: white;
                      text-align: center;
                  }
                  .container {
                      background: rgba(255, 255, 255, 0.1);
                      padding: 40px;
                      border-radius: 20px;
                      backdrop-filter: blur(10px);
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>üèõÔ∏è Biblioteca Digital</h1>
                  <p>Documentaci√≥n en construcci√≥n...</p>
                  <p>La documentaci√≥n se generar√° autom√°ticamente en el pr√≥ximo push.</p>
              </div>
          </body>
          </html>
          EOF
          fi
          
      - name: Setup Pages
        uses: actions/configure-pages@v3
        
      - name: Upload to Pages
        uses: actions/upload-pages-artifact@v2
        with:
          path: site/
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  notify-completion:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [analyze-code, generate-docs, generate-diagrams, publish-pages]
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "##  Resumen de Generaci√≥n de Documentaci√≥n" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "###  An√°lisis de C√≥digo" >> $GITHUB_STEP_SUMMARY
          echo "- **Archivos JavaScript**: ${{ needs.analyze-code.outputs.has-js-files == 'true' && ' Encontrados' || ' No encontrados' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Clases detectadas**: ${{ needs.analyze-code.outputs.classes-found }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "###  Documentaci√≥n JSDoc" >> $GITHUB_STEP_SUMMARY
          echo "- **Estado**: ${{ needs.generate-docs.result == 'success' && ' Generada exitosamente' || needs.generate-docs.result == 'skipped' && '‚è≠Ô∏è Omitida (sin archivos JS)' || '‚ùå Error' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "###  Diagramas de Clases" >> $GITHUB_STEP_SUMMARY
          echo "- **Estado**: ${{ needs.generate-diagrams.result == 'success' && ' Generados exitosamente' || needs.generate-diagrams.result == 'skipped' && '‚è≠Ô∏è Omitidos (sin clases)' || '‚ùå Error' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "###  GitHub Pages" >> $GITHUB_STEP_SUMMARY
          echo "- **Estado**: ${{ needs.publish-pages.result == 'success' && ' Publicado exitosamente' || ' Error en publicaci√≥n' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Enlaces √ötiles" >> $GITHUB_STEP_SUMMARY
          echo "- [ Documentaci√≥n](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/)" >> $GITHUB_STEP_SUMMARY
          echo "- [ Repositorio](https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }})" >> $GITHUB_STEP_SUMMARY
          echo "- [ Actions](https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions)" >> $GITHUB_STEP_SUMMARY
          
      - name: Success notification
        if: needs.publish-pages.result == 'success'
        run: |
          echo " ¬°Documentaci√≥n generada y publicada exitosamente!"
          echo " Documentaci√≥n disponible en: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
          echo " Diagramas de clases incluidos"
          echo " Documentaci√≥n JSDoc completa"