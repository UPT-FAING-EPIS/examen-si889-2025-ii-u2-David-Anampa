name: Publish Version - Build, Test, Coverage & Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  NODE_VERSION: '18'

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: build/
          retention-days: 30

  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test -- --coverage --watchAll=false
        
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: coverage/
          retention-days: 30

  coverage:
    name: Generate and Publish Coverage Report
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate coverage report
        run: npm run test:coverage
        
      - name: Create coverage index page
        run: |
          mkdir -p coverage-site
          cat > coverage-site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="es">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Task Manager - Reportes</title>
              <style>
                  * { margin: 0; padding: 0; box-sizing: border-box; }
                  body {
                      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      min-height: 100vh;
                      display: flex;
                      align-items: center;
                      justify-content: center;
                      padding: 20px;
                  }
                  .container {
                      background: rgba(255, 255, 255, 0.1);
                      backdrop-filter: blur(10px);
                      border-radius: 20px;
                      padding: 40px;
                      box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
                      border: 1px solid rgba(255, 255, 255, 0.18);
                      text-align: center;
                      max-width: 600px;
                      width: 100%;
                  }
                  h1 {
                      color: white;
                      font-size: 2.5rem;
                      margin-bottom: 10px;
                      font-weight: 700;
                  }
                  .subtitle {
                      color: rgba(255, 255, 255, 0.8);
                      font-size: 1.2rem;
                      margin-bottom: 40px;
                  }
                  .links {
                      display: grid;
                      gap: 20px;
                      margin-bottom: 30px;
                  }
                  .link-card {
                      background: rgba(255, 255, 255, 0.1);
                      border-radius: 15px;
                      padding: 25px;
                      text-decoration: none;
                      color: white;
                      transition: all 0.3s ease;
                      border: 1px solid rgba(255, 255, 255, 0.1);
                  }
                  .link-card:hover {
                      background: rgba(255, 255, 255, 0.2);
                      transform: translateY(-5px);
                      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
                  }
                  .link-title {
                      font-size: 1.3rem;
                      font-weight: 600;
                      margin-bottom: 8px;
                  }
                  .link-desc {
                      color: rgba(255, 255, 255, 0.7);
                      font-size: 0.95rem;
                  }
                  .footer {
                      color: rgba(255, 255, 255, 0.6);
                      font-size: 0.9rem;
                  }
                  .badge {
                      display: inline-block;
                      background: rgba(255, 255, 255, 0.2);
                      padding: 5px 12px;
                      border-radius: 20px;
                      font-size: 0.8rem;
                      margin-left: 10px;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1> Task Manager</h1>
                  <p class="subtitle">Reportes y Documentación</p>
                  
                  <div class="links">
                      <a href="./coverage/lcov-report/index.html" class="link-card">
                          <div class="link-title"> Reporte de Cobertura <span class="badge">Nuevo</span></div>
                          <div class="link-desc">Análisis detallado de cobertura de tests unitarios</div>
                      </a>
                      
                      <a href="https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/releases" class="link-card">
                          <div class="link-title"> Releases</div>
                          <div class="link-desc">Historial de versiones y descargas</div>
                      </a>
                      
                      <a href="https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}" class="link-card">
                          <div class="link-title"> Código Fuente</div>
                          <div class="link-desc">Repositorio principal del proyecto</div>
                      </a>
                      
                      <a href="https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions" class="link-card">
                          <div class="link-title"> GitHub Actions</div>
                          <div class="link-desc">Estado de automatizaciones CI/CD</div>
                      </a>
                  </div>
                  
                  <div class="footer">
                      <p>Generado automáticamente por GitHub Actions</p>
                      <p>Última actualización: $(date)</p>
                  </div>
              </div>
          </body>
          </html>
          EOF
          
      - name: Copy coverage report
        run: cp -r coverage/lcov-report coverage-site/coverage/
        
      - name: Setup Pages
        uses: actions/configure-pages@v3
        
      - name: Upload coverage to Pages
        uses: actions/upload-pages-artifact@v2
        with:
          path: coverage-site/
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, test, coverage]
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: build/
          
      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: coverage/
          
      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
          
      - name: Generate changelog
        id: changelog
        run: |
          echo "##  Cambios en ${{ steps.get_version.outputs.version }}" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "###  Nuevas Características" >> CHANGELOG.md
          git log --pretty=format:"- %s" --grep="feat:" --since="$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo '1970-01-01')" >> CHANGELOG.md || echo "- Versión inicial del Task Manager" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "###  Correcciones" >> CHANGELOG.md
          git log --pretty=format:"- %s" --grep="fix:" --since="$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo '1970-01-01')" >> CHANGELOG.md || echo "- Mejoras generales de estabilidad" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "###  Estadísticas de esta versión" >> CHANGELOG.md
          echo "- **Cobertura de Tests**: $(grep -o 'Lines.*%' coverage/lcov-report/index.html | head -1 || echo 'No disponible')" >> CHANGELOG.md
          echo "- **Archivos de Build**: $(find build -type f | wc -l) archivos" >> CHANGELOG.md
          echo "- **Tamaño del Build**: $(du -sh build | cut -f1)" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### 🔗 Enlaces Útiles" >> CHANGELOG.md
          echo "- [ Reporte de Cobertura](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/)" >> CHANGELOG.md
          echo "- [ Código Fuente](https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }})" >> CHANGELOG.md
          echo "- [ GitHub Actions](https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions)" >> CHANGELOG.md
          
      - name: Create ZIP package
        run: |
          mkdir -p release-package
          cp -r build/* release-package/
          cp package.json release-package/
          cp README.md release-package/
          cp -r coverage release-package/
          cd release-package && zip -r ../task-manager-${{ steps.get_version.outputs.version }}.zip .
          
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Task Manager ${{ steps.get_version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
          
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./task-manager-${{ steps.get_version.outputs.version }}.zip
          asset_name: task-manager-${{ steps.get_version.outputs.version }}.zip
          asset_content_type: application/zip

  notify:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [build, test, coverage, release]
    if: success()
    
    steps:
      - name: Success notification
        run: |
          echo " ¡Publicación exitosa!"
          echo " Build completado"
          echo " Tests ejecutados"
          echo " Cobertura publicada en GitHub Pages"
          echo " Release creado"
          echo ""
          echo " Enlaces:"
          echo " Cobertura: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
          echo " Releases: https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/releases"